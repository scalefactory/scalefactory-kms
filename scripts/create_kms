#!/usr/bin/env ruby
#
# Copyright 2016 The Scale Factory Limited
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of 
# the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

gem 'aws-sdk', '>= 2.2.32'
require 'aws-sdk'
require 'optparse'
require 'json'
require 'erb'
require 'fileutils'
require 'tmpdir'
require 'English'

script_dir = File.absolute_path(File.dirname(__FILE__))

options = {}
optparse = OptionParser.new do |opts|
    opts.banner = "Usage: create_kms [options]"

    opts.on('-p', '--profile NAME', 'AWS profile name') do |v|
        options[:profile] = v
    end
    opts.on('-r', '--region REGION', 'AWS Region to use, default eu-west-1') do |v|
        options[:region] = v
    end
    opts.on('-a', '--alias ALIAS', 'KMS Key Alias, default sf_hiera') do |v|
        options[:alias] = v
    end
    opts.on('--adminusers ID,ID', Array, 'List of AWS KMS admin '\
            'accounts/groups,etc. If the arn looks like '\
            '\'arn:aws:iam::1111111111:role/sf_default_role\' '\
            'then this would be role/sf_default_role.') do |v|
        options[:admin_users] = v
    end
    opts.on('--keyusers ID,ID', Array, 'List of AWS KMS encrypt/decrypt '\
            'roles,etc. If the arn looks like '\
            '\'arn:aws:iam::1111111111:role/sf_default_role\' then this would '\
            'be role/sf_default_role.  Default roles are '\
            'role/sf_default_role, role/sf_core_role, role/sf_jenkins_role.') do |v|
        options[:key_users] = v
    end
    opts.on('-t', '--target FOLDER', 'Folder to write backup/output to. Uses '\
            'script dir as default') { |v| options[:target_folder] = v }
    opts.on('--dryrun', 'Won\'t change policy on AWS, but will create policy '\
            'files to inspect')  { |v| options[:dryrun] = true }
    opts.on('--assumerole ROLE', 'Assume IAM role, supply ARN') do |v|
        options[:iamrole] = v
    end
    opts.on('--serial SERIAL', '2FA defice serial when assuming role') do |v|
        options[:serial_number] = v
    end
    opts.on('--token TOKEN', '2FA token when assuming role') do |v|
        options[:token] = v
    end

end

begin
    optparse.parse!
    
    options[:region] = 'eu-west-1' if options[:region].nil?
    options[:alias] = 'sf_hiera' if options[:alias].nil?
    options[:target_folder] = script_dir if options[:target_folder].nil?
    options[:dryrun] = false if options[:dryrun].nil?
    
    if options[:key_users].nil?
        options[:key_users] = ['role/sf_default_role', 'role/sf_core_role', 'role/sf_jenkins_role']
    end
        
    if options[:token].nil? and !options[:serial_number].nil?
        raise OptionParser::MissingArgument, '--token'
    end
    
    if options[:serial_number].nil? and !options[:token].nil?
        raise OptionParser::MissingArgument, '--serial'
    end

rescue OptionParser::InvalidOption, OptionParser::MissingArgument
    $stderr.puts $ERROR_INFO.to_s
    $stderr.puts optparse
    exit 2
end

unless options[:iamrole].nil?
    if options[:token].nil?
        credentials = Aws::AssumeRoleCredentials.new(
            client: Aws::STS::Client.new(
                profile: options[:profile],
                region: options[:region]
                ),
            role_arn: options[:iamrole],
            role_session_name: "encrypt-script"
        )
    else
        credentials = Aws::AssumeRoleCredentials.new(
            client: Aws::STS::Client.new(
                profile: options[:profile],
                region: options[:region]
                ),
            role_arn: options[:iamrole],
            role_session_name: "encrypt-script",
            serial_number: options[:serial_number],
            token_code: options[:token]
        )
    end
else
    if options[:profile].nil?
        credentials = nil
    else
        credentials = Aws::SharedCredentials.new(profile_name: options[:profile])
    end
end

begin
    if credentials.nil?
        kms = Aws::KMS::Client.new(region: options[:region])
        sts = Aws::STS::Client.new(region: options[:region])
    else
        kms = Aws::KMS::Client.new(credentials: credentials, region: options[:region])
        sts = Aws::STS::Client.new(credentials: credentials, region: options[:region])
    end

    # Used in policy template
    account_id = sts.get_caller_identity.account
    my_user_arn = sts.get_caller_identity.arn
rescue Aws::Errors::MissingCredentialsError
    $stderr.puts 'Unable to login with credentials'
    exit 2
end

puts "Acting on account #{account_id} as #{my_user_arn}"
puts ''

unless File.exists?("#{options[:target_folder]}/out")
    FileUtils.mkdir_p("#{options[:target_folder]}/out")
end

File.open("#{options[:target_folder]}/out/policy.yaml", 'w') { |atf|
    policy_template = "#{script_dir}/../templates/policy.json.erb"
    atf.puts ERB.new( File.read(policy_template), nil, '-').result(binding)
}

puts "Policy to apply saved to #{options[:target_folder]}/out/policy.yaml"
policy = File.read("#{options[:target_folder]}/out/policy.yaml")
puts ''

aliases = kms.list_aliases.aliases.map(&:alias_name)

puts "The following keys aliases exist:"
aliases.each do |key_alias|
  puts key_alias
end

puts ''

unless aliases.include? "alias/#{options[:alias]}"
    unless options[:dryrun]
        puts "No alias for #{options[:alias]}, creating KMS Master Key"
        key_id = kms.create_key({
        policy: policy,
        description: "#{options[:alias]} key",
        key_usage: "ENCRYPT_DECRYPT", # accepts ENCRYPT_DECRYPT
        }).key_metadata.key_id

        kms.create_alias({
        alias_name: "alias/#{options[:alias]}",
        target_key_id: key_id,
        })
    else
        puts "Dry run: No alias for #{options[:alias]}, KMS Master Key would be created"
    end
else
    puts "Alias for #{options[:alias]} already existed."
    
    # get key arn, as can't use alias here
    aliases = kms.list_aliases.aliases.map{|k| [k.alias_name, k.target_key_id]}    
    key_id = aliases.select{ |aname, id| aname == "alias/#{options[:alias]}" }[0][1]

    current_policy = kms.get_key_policy({
        key_id: key_id,
        policy_name: "default", 
    }).policy
    
    old_policy_filename = "policy.#{Time.now.strftime('%Y-%m-%d_%H-%M-%S')}.yaml"
    old_policy_file = "#{options[:target_folder]}/backup/#{old_policy_filename}"
    unless File.exists?("#{options[:target_folder]}/backup")
        FileUtils.mkdir_p("#{options[:target_folder]}/backup") 
    end
    File.write(old_policy_file, current_policy)
    
    puts ''
    puts "Existing policy saved to #{old_policy_file}"
    
    unless options[:dryrun]
        kms.put_key_policy({
            key_id: key_id, 
            policy_name: "default", 
            policy: policy, 
        })
        
        puts "Policy updated"
    else
        puts "Dry run: policy would be updated"
    end

end
